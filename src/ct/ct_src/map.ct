(import audio)
(import engine)
(import image)
(import utils)
(import image)
(import ct_array)
(import sprite)
(import tile)
(import render)
(import constants)

(import text)
(import unit)
(weak_import game)


(defclass Map)
    (int rows)
    (int cols)
    ((make_array Tile 5000) tiles)
    ((make_array Unit 100) units)
    (Unit unit_temporary)
    (Text text)

    (defun get_idx ((self Any)) Any)
        (return 0)

    (defun create_initial ((self Any) (game Game) (rows int) (cols int)) Any)
        (= tile (Tile))

        (= self.rows rows)
        (= self.cols cols)
        (= text_dst (create_point 5 5))
        (= color (create_color 255 255 255 255))
        (= outline_color (create_color 0 0 0 255))
        (self.text.init game "Hello" text_dst FontStyle.Bold TextAlignment.Left TextWordWrap.NoWrap 500 40 color 1 outline_color false)
        (= unit_dst (create_point 100 100))
        (self.unit_temporary.set_to game UnitName.Knight unit_dst)
        (self.units.push self.unit_temporary)
        (= unit_dst (create_point 140 120))
        (self.unit_temporary.set_to game UnitName.Slime unit_dst)
        (self.units.push self.unit_temporary)
        (= unit_dst (create_point 140 170))
        (self.unit_temporary.set_to game UnitName.Bunny unit_dst)
        (self.units.push self.unit_temporary)
        (= unit_dst (create_point 80 50))
        (self.unit_temporary.set_to game UnitName.Slime unit_dst)
        (self.units.push self.unit_temporary)
        (= unit_dst (create_point 300 200))
        (self.unit_temporary.set_to game UnitName.Slime unit_dst)
        (self.units.push self.unit_temporary)
        (= unit_dst (create_point 50 300))
        (self.unit_temporary.set_to game UnitName.Bat unit_dst)
        (self.units.push self.unit_temporary)
        (= unit_dst (create_point 70 330))
        (self.unit_temporary.set_to game UnitName.Bat unit_dst)
        (self.units.push self.unit_temporary)
        (= unit_dst (create_point 400 50))
        (self.unit_temporary.set_to game UnitName.Stump unit_dst)
        (self.units.push self.unit_temporary)
        (for i (range rows))
            (for j (range cols))
                (tile.sprite.srcs.clear)
                (= tile_point (create_point i j))
                (= dst (index_to_world_point tile_point game.tile_size))
                (= tile.sprite.image (game.engine.get_image ImageName.Tiles))
                (= src (create_rect 0 0 20 20))
                (tile.sprite.srcs.push src)
                (= tile.sprite.dst.x dst.x)
                (= tile.sprite.dst.y dst.y)
                (= tile.sprite.dst.w src.w)
                (= tile.sprite.dst.h src.h)
                (= tile.sprite.is_camera_rendered true)
                (self.tiles.push tile)

    (defun update ((self Any) (game Game)) Any)
        (= w_int (cast SDLK.w "int"))
        (= a_int (cast SDLK.a "int"))
        (= s_int (cast SDLK.s "int"))
        (= d_int (cast SDLK.d "int"))
        (= w_down game.engine.keys_held_down[w_int])
        (= a_down game.engine.keys_held_down[a_int])
        (= s_down game.engine.keys_held_down[s_int])
        (= d_down game.engine.keys_held_down[d_int])
        (= camera_move_dist 4)

        ; bounds checking fails for if elif chains because
        ; it inserts an if to bounds check ,  not sure how
        ; to solve that yet
        (if w_down)
            (-= game.engine.camera.dst.y camera_move_dist)
        (if a_down)
            (-= game.engine.camera.dst.x camera_move_dist)
        (if s_down)
            (+= game.engine.camera.dst.y camera_move_dist)
        (if d_down)
            (+= game.engine.camera.dst.x camera_move_dist)

        (foreach tile self.tiles)
            (tile.update game)
        (foreach unit self.units)
            (unit.update game)

    (defun draw ((self Any) (game Game)) Any)
        (foreach tile self.tiles)
            (tile.draw game)
        (foreach unit self.units)
            (unit.draw game)
        (self.text.draw game)
